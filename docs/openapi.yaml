openapi: 3.0.3
info:
  title: Cognitive Mesh Platform API
  description: |
    The complete OpenAPI v3 specification for the Cognitive Mesh platform.
    This document covers the core APIs for the plugin-based dashboard, widget registry, marketplace,
    and all Convener backend services. All endpoints adhere to the standards defined in the
    Global Non-Functional Requirements Appendix.
  version: "1.0.0"
  contact:
    name: Cognitive Mesh Platform Team
    email: platform-team@cognitivemesh.example.com
  license:
    name: Commercial
    url: 'https://cognitivemesh.example.com/license'

servers:
  - url: 'https://api.cognitivemesh.example.com/v1'
    description: Production Server
  - url: 'https://api.staging.cognitivemesh.example.com/v1'
    description: Staging Server
  - url: 'http://localhost:5000/v1'
    description: Local Developer Sandbox

tags:
  - name: Plugin Dashboard Shell
    description: APIs for managing user dashboard layouts, widgets, and persistence.
  - name: Plugin Registry
    description: Core APIs for registering, updating, and retrieving widget definitions.
  - name: Plugin Marketplace
    description: APIs for the plugin submission, review, approval, and discovery workflow.
  - name: Convener - Champion Discovery
    description: Service to identify and rank knowledge champions within the organization.
  - name: Convener - Community Pulse
    description: Service to analyze sentiment and engagement in communication channels.
  - name: Convener - Innovation Spread
    description: Service to track the diffusion and adoption of ideas.
  - name: Convener - Learning Catalyst
    description: Service to provide personalized learning recommendations.

paths:
  # --- Plugin Registry ---
  /widgets:
    post:
      tags:
        - Plugin Registry
      summary: Register a New Widget
      description: |
        Submits a new widget definition to the registry. If a widget with the same ID exists,
        it will be updated only if the new version is greater than the existing version.
        Complies with NFR sections 1 (Security) and 3 (Versioning).
      security:
        - ApiKeyAuth: []
          CognitiveMeshAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetDefinition'
      responses:
        '201':
          description: Widget registered or updated successfully.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
    get:
      tags:
        - Plugin Registry
      summary: Get All Widgets
      description: Retrieves a list of all currently registered and approved widget definitions.
      security:
        - CognitiveMeshAuth: [user]
      responses:
        '200':
          description: A list of all available widget definitions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WidgetDefinition'
        '401':
          $ref: '#/components/responses/401Unauthorized'

  # --- Marketplace ---
  /marketplace/submissions:
    post:
      tags:
        - Plugin Marketplace
      summary: Submit a Plugin for Review
      description: |
        Allows developers to submit a new plugin to the marketplace for admin review and approval.
        The submission must include a valid widget definition and submitter info.
        Complies with NFR sections 1 (Security) and 5 (Compliance).
      security:
        - CognitiveMeshAuth: [developer]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginSubmission'
      responses:
        '202':
          description: Submission accepted and is pending review.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'

  /marketplace/submissions/{submissionId}/approve:
    post:
      tags:
        - Plugin Marketplace
      summary: Approve a Plugin Submission
      description: |
        Allows an administrator to approve a pending plugin submission, making the widget
        available in the marketplace. This action is fully audited.
        Complies with NFR sections 2 (Audit Logging) and 11 (Change Management).
      security:
        - CognitiveMeshAuth: [admin]
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewerComments:
                  type: string
                  description: Comments from the admin approving the submission.
      responses:
        '200':
          description: Plugin approved and published to the marketplace.
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'

  # --- Convener Backend ---
  /champions:
    get:
      tags:
        - Convener - Champion Discovery
      summary: Discover Knowledge Champions
      description: Finds and ranks top knowledge champions based on a specific skill or tag.
      security:
        - CognitiveMeshAuth: [user]
      parameters:
        - name: skill
          in: query
          required: true
          schema:
            type: string
            example: "MLOps"
        - name: timeframe
          in: query
          required: false
          schema:
            type: string
            enum: [30d, 90d, 1y]
            default: 90d
      responses:
        '200':
          description: A ranked list of knowledge champions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChampionDiscoveryResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'

  /community-pulse:
    get:
      tags:
        - Convener - Community Pulse
      summary: Get Community Pulse
      description: Analyzes and returns sentiment and engagement metrics for a specified communication channel.
      security:
        - CognitiveMeshAuth: [user]
      parameters:
        - name: channelId
          in: query
          required: true
          schema:
            type: string
            example: "C024BE91L"
      responses:
        '200':
          description: Sentiment and engagement metrics for the channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityPulseResponse'
        '401':
          $ref: '#/components/responses/401Unauthorized'

components:
  securitySchemes:
    CognitiveMeshAuth:
      type: oauth2
      description: OAuth2 authentication for user and admin access, compliant with NFR section 1.3.
      flows:
        authorizationCode:
          authorizationUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/authorize
          tokenUrl: https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token
          scopes:
            admin: "Grants administrator-level access"
            user: "Grants standard user access"
            developer: "Grants developer access for plugin submission"
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: API Key for service-to-service authentication.

  schemas:
    # --- Core Models ---
    WidgetDefinition:
      type: object
      description: The core contract for a widget, defining its metadata, permissions, and rendering info.
      required:
        - id
        - title
        - version
        - renderFunction
      properties:
        id:
          type: string
          description: Unique, machine-readable identifier (e.g., "community-pulse-widget").
        title:
          type: string
          description: Human-readable title for the widget.
        description:
          type: string
        version:
          type: string
          description: Semantic version (e.g., "1.0.0").
        author:
          type: string
        permissions:
          type: array
          items:
            type: string
          description: Data access scopes required by the widget.
        dataSources:
          type: array
          items:
            type: string
          description: Data sources consumed, for provenance tracking.
        renderFunction:
          type: string
          description: The name of the UI component to render.

    DashboardLayout:
      type: object
      description: Represents a user's complete dashboard configuration.
      properties:
        layoutId:
          type: string
          format: uuid
        userId:
          type: string
        name:
          type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/WidgetInstance'

    WidgetInstance:
      type: object
      description: A specific instance of a widget on a user's dashboard.
      properties:
        instanceId:
          type: string
          format: uuid
        widgetId:
          type: string
        position:
          type: object
          properties:
            x:
              type: integer
            y:
              type: integer
        size:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer

    # --- Marketplace Models ---
    PluginSubmission:
      type: object
      description: A request to submit a new plugin to the marketplace for review.
      properties:
        submissionId:
          type: string
          format: uuid
          readOnly: true
        widgetDefinition:
          $ref: '#/components/schemas/WidgetDefinition'
        submitterInfo:
          type: object
          properties:
            authorName:
              type: string
            contactEmail:
              type: string
              format: email
        status:
          type: string
          enum: [Pending, UnderReview, Approved, Rejected]
          readOnly: true
        codeSignature:
          type: string
          description: Cryptographic signature of the plugin package.

    # --- Convener Models ---
    ChampionDiscoveryResponse:
      type: object
      properties:
        champions:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              displayName:
                type: string
              influenceScore:
                type: number
                format: double
              provenance:
                type: array
                items:
                  type: string

    CommunityPulseResponse:
      type: object
      properties:
        channelId:
          type: string
        sentimentScore:
          type: number
          format: double
        engagementTrend:
          type: string
          enum: [increasing, decreasing, stable]

    # --- Common Error Responses ---
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        correlationId:
          type: string
          format: uuid
          description: A unique ID for tracing the request through the system.

  responses:
    400BadRequest:
      description: The request was malformed or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401Unauthorized:
      description: Authentication failed or was not provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403Forbidden:
      description: The authenticated principal does not have permission to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    404NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
