openapi: 3.0.3
info:
  title: Cognitive Mesh API
  description: |
    # Cognitive Mesh API

    The Cognitive Mesh API provides programmatic access to the Cognitive Mesh platform,
    enabling integration with various services including champion discovery, community
    analytics, learning resources, innovation tracking, and more.

    ## Authentication

    The API uses JWT (JSON Web Tokens) for authentication. Include the token in the
    `Authorization` header as a bearer token:

    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting

    - **Standard**: 1000 requests per minute per API key
    - **Burst**: 100 requests per second

    ## Versioning

    The API follows semantic versioning (e.g., v1.0.0). The current version is specified
    in the URL path (e.g., `/api/v1/...`).
  version: 1.0.0
  contact:
    name: Cognitive Mesh Support
    email: support@cognitivemesh.com
    url: https://cognitivemesh.com/support
  license:
    name: Proprietary
    url: https://cognitivemesh.com/terms
  termsOfService: https://cognitivemesh.com/terms
externalDocs:
  description: API Documentation
  url: https://docs.cognitivemesh.com/api
servers:
  - url: https://api.cognitivemesh.com/v1
    description: Production API server
  - url: https://staging-api.cognitivemesh.com/v1
    description: Staging/Test API server
  - url: http://localhost:3000/v1
    description: Local development server
tags:
  - name: Champion Discovery
    description: Endpoints for champion discovery and matchmaking
  - name: Community
    description: Community analytics and engagement metrics
  - name: Learning
    description: Learning resources and experiment management
  - name: Innovation
    description: Innovation tracking and network analysis
  - name: Approvals
    description: User consent and approval workflows
  - name: Provenance
    description: Data lineage and audit trails
  - name: Notifications
    description: User notifications and preferences
paths:
  /champion-discovery/matches:
    get:
      summary: Retrieve scoring and matchmaking results for champions
      description: |
        Returns a paginated list of champion matches with their relevance scores. Matches are sorted by relevance score in descending order.
      operationId: getChampionMatches
      tags:
        - Champion Discovery
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - $ref: '#/components/parameters/SortQuery'
        - name: minScore
          in: query
          description: Minimum relevance score (0-1)
          schema:
            type: number
            format: float
            minimum: 0
            maximum: 1
            default: 0.5
        - name: skills
          in: query
          description: Filter by required skills (comma-separated)
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/ChampionMatch'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /champion-discovery/matches/{championId}:
    get:
      summary: Get detailed match information for a specific champion
      operationId: getChampionMatchDetails
      tags:
        - Champion Discovery
      parameters:
        - name: championId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the champion
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChampionMatchDetails'
        '404':
          $ref: '#/components/responses/NotFound'
  /community-pulse/metrics:
    get:
      summary: Fetch aggregated community metrics and safety indicators
      description: |
        Returns comprehensive metrics about community health, engagement, and safety. Data can be filtered by time range and community segments.
      operationId: getCommunityPulse
      tags:
        - Community
      parameters:
        - name: timeRange
          in: query
          description: Time range for metrics (e.g., 24h, 7d, 30d)
          schema:
            type: string
            enum:
              - 24h
              - 7d
              - 30d
              - 90d
              - all
            default: 7d
        - name: segmentBy
          in: query
          description: Segment metrics by specific dimension
          schema:
            type: string
            enum:
              - none
              - skill
              - region
              - experience
            default: none
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityPulseMetrics'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /community-pulse/sentiment:
    get:
      summary: Get community sentiment analysis
      description: Returns sentiment analysis across community interactions
      operationId: getCommunitySentiment
      tags:
        - Community
      parameters:
        - name: timeRange
          in: query
          description: Time range for sentiment analysis
          schema:
            type: string
            enum:
              - 24h
              - 7d
              - 30d
            default: 7d
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunitySentiment'
  /community-pulse/health:
    get:
      summary: Get community health indicators
      description: Returns key indicators of community health and activity
      operationId: getCommunityHealth
      tags:
        - Community
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityHealth'
  /learning/experiments:
    post:
      summary: Create a new learning experiment
      description: Submits a new learning experiment with resources and parameters
      operationId: createLearningExperiment
      tags:
        - Learning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningExperimentRequest'
      responses:
        '201':
          description: Experiment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningExperimentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      summary: List learning experiments
      description: Retrieves a paginated list of learning experiments
      operationId: listLearningExperiments
      tags:
        - Learning
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: status
          in: query
          description: Filter by experiment status
          schema:
            type: string
            enum:
              - active
              - completed
              - failed
              - pending
        - name: sort
          in: query
          description: Sort order (field and direction)
          schema:
            type: string
            enum:
              - created_asc
              - created_desc
              - updated_asc
              - updated_desc
            default: created_desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningExperimentSummary'
  /learning/experiments/{experimentId}:
    get:
      summary: Get experiment details
      description: Retrieves detailed information about a specific experiment
      operationId: getLearningExperiment
      tags:
        - Learning
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningExperimentDetails'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update experiment
      description: Updates an existing learning experiment
      operationId: updateLearningExperiment
      tags:
        - Learning
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningExperimentUpdate'
      responses:
        '200':
          description: Experiment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningExperimentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /learning/resources:
    get:
      summary: List learning resources
      description: Retrieves a paginated list of learning resources
      operationId: listLearningResources
      tags:
        - Learning
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: type
          in: query
          description: Filter by resource type
          schema:
            type: string
            enum:
              - article
              - video
              - course
              - dataset
              - model
              - other
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningResource'
  /innovation/trends:
    get:
      summary: Get innovation adoption trends
      description: |
        Retrieves metrics and visualizations showing the spread and adoption of innovations across the community
      operationId: getInnovationTrends
      tags:
        - Innovation
      parameters:
        - name: timeRange
          in: query
          description: Time range for trend analysis
          schema:
            type: string
            enum:
              - 7d
              - 30d
              - 90d
              - 1y
            default: 30d
        - name: segmentBy
          in: query
          description: Segment metrics by community dimension
          schema:
            type: string
            enum:
              - none
              - region
              - skill
              - tenure
            default: none
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InnovationTrends'
        '400':
          $ref: '#/components/responses/BadRequest'
  /innovation/network:
    get:
      summary: Get innovation network graph
      description: Returns a graph of how innovations spread through the network
      operationId: getInnovationNetwork
      tags:
        - Innovation
      parameters:
        - name: innovationId
          in: query
          description: Filter by specific innovation ID
          schema:
            type: string
            format: uuid
        - name: depth
          in: query
          description: Network traversal depth
          schema:
            type: integer
            minimum: 1
            maximum: 5
            default: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InnovationNetwork'
  /innovation/catalysts:
    get:
      summary: Identify innovation catalysts
      description: |
        Identifies key individuals and groups driving innovation adoption
      operationId: getInnovationCatalysts
      tags:
        - Innovation
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InnovationCatalyst'
  /approvals/requests:
    post:
      summary: Submit a new approval request
      description: Creates a new approval request for user consent
      operationId: createApprovalRequest
      tags:
        - Approvals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRequestCreate'
      responses:
        '201':
          description: Approval request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      summary: List approval requests
      description: Retrieves a list of approval requests with filtering options
      operationId: listApprovalRequests
      tags:
        - Approvals
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: status
          in: query
          description: Filter by approval status
          schema:
            type: string
            enum:
              - pending
              - approved
              - rejected
              - expired
        - name: type
          in: query
          description: Filter by request type
          schema:
            type: string
        - name: requesterId
          in: query
          description: Filter by requester ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApprovalRequestSummary'
  /approvals/requests/{requestId}:
    get:
      summary: Get approval request details
      description: Retrieves detailed information about a specific approval request
      operationId: getApprovalRequest
      tags:
        - Approvals
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestDetails'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update approval request
      description: Updates an approval request (e.g., approve, reject, cancel)
      operationId: updateApprovalRequest
      tags:
        - Approvals
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalRequestUpdate'
      responses:
        '200':
          description: Approval request updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /approvals/consents:
    get:
      summary: List user consents
      description: Retrieves a list of consents given by the current user
      operationId: listUserConsents
      tags:
        - Approvals
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: status
          in: query
          description: Filter by consent status
          schema:
            type: string
            enum:
              - active
              - revoked
              - expired
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserConsent'
  /approvals/consents/{consentId}:
    delete:
      summary: Revoke consent
      description: Revokes a previously given consent
      operationId: revokeConsent
      tags:
        - Approvals
      parameters:
        - name: consentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Consent revoked successfully
        '404':
          $ref: '#/components/responses/NotFound'
  /provenance/records:
    post:
      summary: Create a new provenance record
      description: Records the origin and history of a data item or resource
      operationId: createProvenanceRecord
      tags:
        - Provenance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvenanceRecordCreate'
      responses:
        '201':
          description: Provenance record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvenanceRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Query provenance records
      description: |
        Retrieves provenance records with filtering and pagination options. Supports querying by entity, activity, or agent.
      operationId: queryProvenanceRecords
      tags:
        - Provenance
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: entityId
          in: query
          description: Filter by entity ID
          schema:
            type: string
            format: uuid
        - name: activityType
          in: query
          description: Filter by activity type
          schema:
            type: string
        - name: agentId
          in: query
          description: Filter by agent ID
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Filter records after this timestamp
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: Filter records before this timestamp
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProvenanceRecord'
  /provenance/records/{recordId}:
    get:
      summary: Get provenance record by ID
      description: Retrieves a specific provenance record by its unique identifier
      operationId: getProvenanceRecord
      tags:
        - Provenance
      parameters:
        - name: recordId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvenanceRecordDetails'
        '404':
          $ref: '#/components/responses/NotFound'
  /provenance/lineage/{entityId}:
    get:
      summary: Get lineage for an entity
      description: |
        Retrieves the complete lineage of an entity, showing its full provenance history and relationships with other entities and activities.
      operationId: getEntityLineage
      tags:
        - Provenance
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: depth
          in: query
          description: Maximum depth of the lineage graph to return
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineageGraph'
        '404':
          $ref: '#/components/responses/NotFound'
  /notifications:
    post:
      summary: Send a notification
      description: Creates and sends a notification to one or more recipients
      operationId: sendNotification
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '202':
          description: Notification accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List notifications
      description: Retrieves a paginated list of notifications for the current user
      operationId: listNotifications
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: status
          in: query
          description: Filter by notification status
          schema:
            type: string
            enum:
              - unread
              - read
              - archived
        - name: type
          in: query
          description: Filter by notification type
          schema:
            type: string
        - name: startDate
          in: query
          description: Filter notifications after this date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter notifications before this date
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /notifications/{notificationId}:
    get:
      summary: Get notification by ID
      description: Retrieves a specific notification by its ID
      operationId: getNotification
      tags:
        - Notifications
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDetails'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update notification status
      description: Updates the status of a notification (e.g., mark as read)
      operationId: updateNotification
      tags:
        - Notifications
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - read
                    - unread
                    - archived
      responses:
        '200':
          description: Notification updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /notifications/preferences:
    get:
      summary: Get notification preferences
      description: Retrieves the current user's notification preferences
      operationId: getNotificationPreferences
      tags:
        - Notifications
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
    put:
      summary: Update notification preferences
      description: Updates the current user's notification preferences
      operationId: updateNotificationPreferences
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferences'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  schemas:
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - createdAt
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          example: 100
        itemCount:
          type: integer
          example: 10
        itemsPerPage:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 10
        currentPage:
          type: integer
          example: 1
    Error:
      type: object
      properties:
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid input data
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: must be a valid email address
    PaginationQuery:
      in: query
      name: pagination
      schema:
        type: object
        properties:
          page:
            type: integer
            minimum: 1
            default: 1
          limit:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      style: deepObject
      explode: true
    SortQuery:
      in: query
      name: sort
      schema:
        type: array
        items:
          type: string
          pattern: ^[+-]?[a-zA-Z0-9_]+(\.[a-zA-Z0-9_]+)*$
        example:
          - createdAt,-priority
      style: form
      explode: false
    ChampionMatch:
      type: object
      required:
        - championId
        - score
        - skills
      properties:
        championId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Alex Johnson
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
          example: 0.87
          description: Match relevance score (0-1)
        skills:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: skill-ai-ml
              name:
                type: string
                example: Machine Learning
              matchScore:
                type: number
                format: float
                minimum: 0
                maximum: 1
                example: 0.92
        lastActive:
          type: string
          format: date-time
          example: '2025-06-30T15:45:00Z'
    ChampionMatchDetails:
      allOf:
        - $ref: '#/components/schemas/ChampionMatch'
        - type: object
          properties:
            bio:
              type: string
              example: Senior AI Researcher with 10+ years of experience...
            availability:
              type: string
              enum:
                - available
                - limited
                - unavailable
              example: available
            contactInfo:
              type: object
              properties:
                email:
                  type: string
                  format: email
                linkedIn:
                  type: string
                  format: uri
            projects:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  role:
                    type: string
                  duration:
                    type: string
            feedbackScore:
              type: number
              format: float
              minimum: 0
              maximum: 5
              example: 4.7
    CommunityPulseMetrics:
      type: object
      required:
        - timestamp
        - timeRange
        - metrics
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'
        timeRange:
          type: string
          example: 7d
        metrics:
          type: object
          properties:
            activeUsers:
              type: integer
              example: 1245
              description: Number of active users in the time period
            newUsers:
              type: integer
              example: 143
              description: New users who joined in the time period
            engagementRate:
              type: number
              format: float
              minimum: 0
              maximum: 1
              example: 0.42
              description: Percentage of active users who engaged with content
            contentCreated:
              type: integer
              example: 342
              description: Number of new content items created
            interactions:
              type: integer
              example: 1245
              description: Total interactions (likes, comments, shares)
            safetyScore:
              type: number
              format: float
              minimum: 0
              maximum: 1
              example: 0.92
              description: Community safety score (higher is better)
            sentiment:
              type: object
              properties:
                positive:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                  example: 0.68
                neutral:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                  example: 0.25
                negative:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                  example: 0.07
        segments:
          type: array
          items:
            type: object
            properties:
              segmentKey:
                type: string
                example: machine-learning
              segmentName:
                type: string
                example: Machine Learning
              metrics:
                $ref: '#/components/schemas/CommunityPulseMetrics/properties/metrics'
    CommunitySentiment:
      type: object
      properties:
        timeRange:
          type: string
          example: 7d
        sentimentScores:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                example: '2025-06-25'
              score:
                type: number
                format: float
                minimum: -1
                maximum: 1
                example: 0.42
        topics:
          type: array
          items:
            type: object
            properties:
              topic:
                type: string
                example: neural networks
              sentiment:
                type: number
                format: float
                minimum: -1
                maximum: 1
                example: 0.65
              volume:
                type: integer
                example: 42
    CommunityHealth:
      type: object
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - critical
          example: healthy
        indicators:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: response_time
              value:
                type: number
                example: 125
              status:
                type: string
                enum:
                  - ok
                  - warning
                  - error
                example: ok
              threshold:
                type: number
                example: 200
        lastUpdated:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'
    LearningExperimentRequest:
      type: object
      required:
        - name
        - description
        - resources
      properties:
        name:
          type: string
          example: Sentiment Analysis Benchmark
          maxLength: 100
        description:
          type: string
          example: Comparing transformer models for sentiment analysis
        resources:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - type
              - uri
            properties:
              type:
                type: string
                enum:
                  - dataset
                  - model
                  - notebook
                  - config
              uri:
                type: string
                format: uri
              description:
                type: string
        parameters:
          type: object
          additionalProperties: true
          example:
            batch_size: 32
            learning_rate: 0.001
            epochs: 10
        tags:
          type: array
          items:
            type: string
          example:
            - nlp
            - sentiment-analysis
            - transformers
    LearningExperimentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        status:
          type: string
          enum:
            - pending
            - running
            - completed
            - failed
          example: pending
        createdAt:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
              example: /learning/experiments/123e4567-e89b-12d3-a456-426614174000
            results:
              type: string
              format: uri
              example: /learning/experiments/123e4567-e89b-12d3-a456-426614174000/results
    LearningExperimentSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum:
            - pending
            - running
            - completed
            - failed
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
    LearningExperimentDetails:
      allOf:
        - $ref: '#/components/schemas/LearningExperimentSummary'
        - type: object
          properties:
            description:
              type: string
            parameters:
              type: object
              additionalProperties: true
            resources:
              type: array
              items:
                $ref: '#/components/schemas/LearningResource'
            metrics:
              type: object
              additionalProperties: true
            createdBy:
              type: string
            updatedBy:
              type: string
    LearningExperimentUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - pending
            - running
            - completed
            - failed
            - cancelled
        parameters:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string
    LearningResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - article
            - video
            - course
            - dataset
            - model
            - other
        title:
          type: string
        description:
          type: string
        uri:
          type: string
          format: uri
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    InnovationTrends:
      type: object
      required:
        - timeRange
        - innovations
      properties:
        timeRange:
          type: string
          example: 30d
        innovations:
          type: array
          items:
            $ref: '#/components/schemas/InnovationTrend'
        metrics:
          type: object
          properties:
            adoptionRate:
              type: number
              format: float
              example: 0.42
            viralCoefficient:
              type: number
              format: float
              example: 1.8
            timeToAdopt:
              type: string
              format: duration
              example: P7DT12H
    InnovationTrend:
      type: object
      required:
        - id
        - name
        - adoptionRate
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          example: New ML Framework
        description:
          type: string
        adoptionRate:
          type: number
          format: float
          example: 0.35
        dailyAdoption:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer
        categories:
          type: array
          items:
            type: string
          example:
            - machine-learning
            - frameworks
    InnovationNetwork:
      type: object
      properties:
        nodes:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/NetworkNodeUser'
              - $ref: '#/components/schemas/NetworkNodeInnovation'
              - $ref: '#/components/schemas/NetworkNodeGroup'
        links:
          type: array
          items:
            $ref: '#/components/schemas/NetworkLink'
    NetworkNodeUser:
      type: object
      required:
        - id
        - type
        - name
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - user
        name:
          type: string
        role:
          type: string
        avatarUrl:
          type: string
          format: uri
    NetworkNodeInnovation:
      type: object
      required:
        - id
        - type
        - name
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - innovation
        name:
          type: string
        category:
          type: string
        adoptionCount:
          type: integer
    NetworkNodeGroup:
      type: object
      required:
        - id
        - type
        - name
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - group
        name:
          type: string
        memberCount:
          type: integer
    NetworkLink:
      type: object
      required:
        - source
        - target
        - type
      properties:
        source:
          type: string
        target:
          type: string
        type:
          type: string
          enum:
            - adopted
            - influenced
            - collaborated
            - mentored
        strength:
          type: number
          minimum: 0
          maximum: 1
    InnovationCatalyst:
      type: object
      required:
        - userId
        - name
        - catalystScore
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        avatarUrl:
          type: string
          format: uri
        role:
          type: string
        catalystScore:
          type: number
          format: float
          minimum: 0
          maximum: 1
        innovationsIntroduced:
          type: integer
        averageAdoptionRate:
          type: number
          format: float
        networkInfluence:
          type: number
          format: float
        lastActive:
          type: string
          format: date-time
    ApprovalRequestCreate:
      type: object
      required:
        - type
        - subject
        - requestedPermissions
      properties:
        type:
          type: string
          example: data_access
          description: Type of approval request
        subject:
          type: object
          description: Subject of the approval request
          properties:
            type:
              type: string
              example: user
            id:
              type: string
              example: 123e4567-e89b-12d3-a456-426614174000
        requestedPermissions:
          type: array
          items:
            type: string
          example:
            - read:profile
            - read:activity
        description:
          type: string
          example: Requesting access to profile and activity data
        expirationDate:
          type: string
          format: date-time
          example: '2025-12-31T23:59:59Z'
        metadata:
          type: object
          additionalProperties: true
    ApprovalRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        status:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - expired
            - cancelled
          example: pending
        createdAt:
          type: string
          format: date-time
          example: '2025-07-01T12:00:00Z'
        expiresAt:
          type: string
          format: date-time
          example: '2025-07-08T12:00:00Z'
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
              example: /approvals/requests/550e8400-e29b-41d4-a716-446655440000
            approve:
              type: string
              format: uri
              example: /approvals/requests/550e8400-e29b-41d4-a716-446655440000/approve
            reject:
              type: string
              format: uri
              example: /approvals/requests/550e8400-e29b-41d4-a716-446655440000/reject
    ApprovalRequestSummary:
      allOf:
        - $ref: '#/components/schemas/ApprovalRequest'
        - type: object
          properties:
            type:
              type: string
              example: data_access
            description:
              type: string
              example: Requesting access to profile and activity data
            requester:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                email:
                  type: string
                  format: email
    ApprovalRequestDetails:
      allOf:
        - $ref: '#/components/schemas/ApprovalRequestSummary'
        - type: object
          properties:
            requestedPermissions:
              type: array
              items:
                type: string
              example:
                - read:profile
                - read:activity
            metadata:
              type: object
              additionalProperties: true
            history:
              type: array
              items:
                $ref: '#/components/schemas/ApprovalEvent'
    ApprovalRequestUpdate:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - approve
            - reject
            - cancel
          example: approve
        reason:
          type: string
          example: Approved for research purposes
        scopes:
          type: array
          items:
            type: string
          example:
            - read:profile
    ApprovalEvent:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2025-07-01T12:30:00Z'
        action:
          type: string
          example: requested
        actor:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        details:
          type: object
          additionalProperties: true
    UserConsent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        requestId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - active
            - revoked
            - expired
          example: active
        grantedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
          nullable: true
        grantedPermissions:
          type: array
          items:
            type: string
          example:
            - read:profile
        requestDetails:
          $ref: '#/components/schemas/ApprovalRequestSummary'
    ProvenanceRecordCreate:
      type: object
      required:
        - entity
        - activity
        - agent
      properties:
        entity:
          $ref: '#/components/schemas/Entity'
        activity:
          $ref: '#/components/schemas/Activity'
        agent:
          $ref: '#/components/schemas/Agent'
        startTime:
          type: string
          format: date-time
          description: When the activity started (defaults to current time if not provided)
        endTime:
          type: string
          format: date-time
          description: When the activity ended (for completed activities)
        wasInformedBy:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of prior activities that informed this one
        qualifiedInfluence:
          type: array
          items:
            $ref: '#/components/schemas/Influence'
        metadata:
          type: object
          additionalProperties: true
          description: Additional context-specific metadata
    ProvenanceRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        entity:
          $ref: '#/components/schemas/Entity'
        activity:
          $ref: '#/components/schemas/Activity'
        agent:
          $ref: '#/components/schemas/Agent'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
          nullable: true
        wasInformedBy:
          type: array
          items:
            type: string
            format: uuid
        qualifiedInfluence:
          type: array
          items:
            $ref: '#/components/schemas/Influence'
        metadata:
          type: object
          additionalProperties: true
        recordedAt:
          type: string
          format: date-time
        recordedBy:
          type: string
          format: uuid
    ProvenanceRecordDetails:
      allOf:
        - $ref: '#/components/schemas/ProvenanceRecord'
        - type: object
          properties:
            lineage:
              $ref: '#/components/schemas/LineageGraph'
            relatedRecords:
              type: array
              items:
                $ref: '#/components/schemas/ProvenanceRecord'
    Entity:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          example: dataset
        name:
          type: string
        description:
          type: string
        attributes:
          type: object
          additionalProperties: true
    Activity:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          example: data_processing
        description:
          type: string
        method:
          type: string
        parameters:
          type: object
          additionalProperties: true
    Agent:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - user
            - service
            - organization
            - algorithm
        name:
          type: string
        role:
          type: string
    Influence:
      type: object
      required:
        - entity
        - role
      properties:
        entity:
          $ref: '#/components/schemas/Entity'
        role:
          type: string
          example: input
        influenceType:
          type: string
          example: derivation
    LineageGraph:
      type: object
      properties:
        nodes:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LineageNodeEntity'
              - $ref: '#/components/schemas/LineageNodeActivity'
              - $ref: '#/components/schemas/LineageNodeAgent'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/LineageEdge'
    LineageNodeEntity:
      type: object
      required:
        - id
        - type
        - label
      properties:
        id:
          type: string
        type:
          type: string
          const: entity
        label:
          type: string
        entityType:
          type: string
        metadata:
          type: object
          additionalProperties: true
    LineageNodeActivity:
      type: object
      required:
        - id
        - type
        - label
      properties:
        id:
          type: string
        type:
          type: string
          const: activity
        label:
          type: string
        activityType:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
          nullable: true
    LineageNodeAgent:
      type: object
      required:
        - id
        - type
        - label
      properties:
        id:
          type: string
        type:
          type: string
          const: agent
        label:
          type: string
        agentType:
          type: string
    LineageEdge:
      type: object
      required:
        - source
        - target
        - type
      properties:
        source:
          type: string
        target:
          type: string
        type:
          type: string
          enum:
            - used
            - wasGeneratedBy
            - wasAssociatedWith
            - wasInformedBy
            - wasDerivedFrom
            - wasAttributedTo
            - actedOnBehalfOf
        role:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
          nullable: true
    NotificationRequest:
      type: object
      required:
        - recipients
        - subject
        - content
      properties:
        recipients:
          type: array
          items:
            oneOf:
              - type: string
                format: email
              - type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
                  phone:
                    type: string
          minItems: 1
          description: List of recipient identifiers (user IDs, emails, or objects with contact info)
        subject:
          type: string
          maxLength: 200
          example: 'Action Required: Review Pending Approval'
        content:
          type: object
          required:
            - text
          properties:
            text:
              type: string
              description: Plain text content
            html:
              type: string
              description: HTML formatted content
            markdown:
              type: string
              description: Markdown formatted content
        priority:
          type: string
          enum:
            - low
            - normal
            - high
            - urgent
          default: normal
        category:
          type: string
          example: approvals
          description: Category for grouping and filtering
        data:
          type: object
          additionalProperties: true
          description: Additional data to include with the notification
        scheduleAt:
          type: string
          format: date-time
          description: When to send the notification (for scheduling)
        expiresAt:
          type: string
          format: date-time
          description: When the notification should expire
        actions:
          type: array
          items:
            $ref: '#/components/schemas/NotificationAction'
    NotificationResponse:
      type: object
      properties:
        notificationId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - queued
            - sent
            - delivered
            - failed
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          additionalProperties: true
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        subject:
          type: string
        preview:
          type: string
          description: Short preview of the notification content
        category:
          type: string
        priority:
          type: string
          enum:
            - low
            - normal
            - high
            - urgent
        status:
          type: string
          enum:
            - unread
            - read
            - archived
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
          nullable: true
        actions:
          type: array
          items:
            $ref: '#/components/schemas/NotificationAction'
    NotificationDetails:
      allOf:
        - $ref: '#/components/schemas/Notification'
        - type: object
          properties:
            content:
              type: object
              properties:
                text:
                  type: string
                html:
                  type: string
                markdown:
                  type: string
            data:
              type: object
              additionalProperties: true
            metadata:
              type: object
              properties:
                sentAt:
                  type: string
                  format: date-time
                readAt:
                  type: string
                  format: date-time
                  nullable: true
                deliveredAt:
                  type: string
                  format: date-time
                  nullable: true
    NotificationAction:
      type: object
      required:
        - id
        - label
        - type
      properties:
        id:
          type: string
          example: approve_request
        label:
          type: string
          example: Approve
        type:
          type: string
          enum:
            - button
            - link
            - dismiss
          example: button
        url:
          type: string
          format: uri
          description: URL to navigate to when the action is taken
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
          default: GET
        body:
          type: object
          additionalProperties: true
          description: Payload to send with the action
        style:
          type: string
          enum:
            - primary
            - secondary
            - success
            - danger
            - warning
            - info
            - light
            - dark
          default: primary
    NotificationPreferences:
      type: object
      properties:
        channels:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: true
            sms:
              type: boolean
              default: false
            inApp:
              type: boolean
              default: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/NotificationCategoryPreference'
        quietHours:
          type: object
          properties:
            enabled:
              type: boolean
              default: false
            startTime:
              type: string
              format: time
              example: '22:00'
            endTime:
              type: string
              format: time
              example: '08:00'
            timezone:
              type: string
              example: America/New_York
    NotificationCategoryPreference:
      type: object
      required:
        - category
        - enabled
      properties:
        category:
          type: string
          example: approvals
        enabled:
          type: boolean
          default: true
        channels:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: true
            sms:
              type: boolean
              default: false
            inApp:
              type: boolean
              default: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        JWT Token Authentication.  Include the token in the Authorization header as: `Bearer <token>`
        Example: `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for programmatic access
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.cognitivemesh.com/oauth2/authorize
          tokenUrl: https://auth.cognitivemesh.com/oauth2/token
          scopes:
            openid: OpenID Connect
            profile: Read user profile
            email: Read user email
            offline_access: Offline access
  responses:
    BadRequest:
      description: Bad Request - The request was invalid or cannot be processed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: VALIDATION_ERROR
            message: Invalid input data
            details:
              - field: email
                message: must be a valid email address
    Unauthorized:
      description: Unauthorized - Authentication is required or has failed
      headers:
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer error="invalid_token"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: UNAUTHORIZED
            message: Authentication required
    Forbidden:
      description: Forbidden - The user doesn't have permission to access the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: FORBIDDEN
            message: Insufficient permissions
    NotFound:
      description: Not Found - The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: NOT_FOUND
            message: Resource not found
    InternalServerError:
      description: Internal Server Error - An unexpected error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: INTERNAL_SERVER_ERROR
            message: An unexpected error occurred
    ServiceUnavailable:
      description: Service Unavailable - The service is temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: SERVICE_UNAVAILABLE
            message: Service temporarily unavailable
    StandardResponses:
      '200':
        description: Success
      '400':
        $ref: '#/components/responses/BadRequest'
      '401':
        $ref: '#/components/responses/Unauthorized'
      '403':
        $ref: '#/components/responses/Forbidden'
      '404':
        $ref: '#/components/responses/NotFound'
      '500':
        $ref: '#/components/responses/InternalServerError'
      '503':
        $ref: '#/components/responses/ServiceUnavailable'
security:
  - bearerAuth: []
  - apiKey: []
