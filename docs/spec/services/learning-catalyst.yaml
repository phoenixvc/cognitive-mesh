paths:
  /learning/experiments:
    post:
      summary: Create a new learning experiment
      description: Submits a new learning experiment with resources and parameters
      operationId: createLearningExperiment
      tags:
        - Learning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningExperimentRequest'
      responses:
        '201':
          description: Experiment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningExperimentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      summary: List learning experiments
      description: Retrieves a paginated list of learning experiments
      operationId: listLearningExperiments
      tags:
        - Learning
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: status
          in: query
          description: Filter by experiment status
          schema:
            type: string
            enum: [active, completed, failed, pending]
        - name: sort
          in: query
          description: Sort order (field and direction)
          schema:
            type: string
            enum: [created_asc, created_desc, updated_asc, updated_desc]
            default: created_desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningExperimentSummary'

  /learning/experiments/{experimentId}:
    get:
      summary: Get experiment details
      description: Retrieves detailed information about a specific experiment
      operationId: getLearningExperiment
      tags:
        - Learning
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningExperimentDetails'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update experiment
      description: Updates an existing learning experiment
      operationId: updateLearningExperiment
      tags:
        - Learning
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningExperimentUpdate'
      responses:
        '200':
          description: Experiment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearningExperimentDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /learning/resources:
    get:
      summary: List learning resources
      description: Retrieves a paginated list of learning resources
      operationId: listLearningResources
      tags:
        - Learning
      parameters:
        - $ref: '#/components/parameters/PaginationQuery'
        - name: type
          in: query
          description: Filter by resource type
          schema:
            type: string
            enum: [article, video, course, dataset, model, other]
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearningResource'

components:
  schemas:
    LearningExperimentRequest:
      type: object
      required:
        - name
        - description
        - resources
      properties:
        name:
          type: string
          example: "Sentiment Analysis Benchmark"
          maxLength: 100
        description:
          type: string
          example: "Comparing transformer models for sentiment analysis"
        resources:
          type: array
          minItems: 1
          items:
            type: object
            required: [type, uri]
            properties:
              type:
                type: string
                enum: [dataset, model, notebook, config]
              uri:
                type: string
                format: uri
              description:
                type: string
        parameters:
          type: object
          additionalProperties: true
          example:
            batch_size: 32
            learning_rate: 0.001
            epochs: 10
        tags:
          type: array
          items:
            type: string
          example: ["nlp", "sentiment-analysis", "transformers"]

    LearningExperimentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        status:
          type: string
          enum: [pending, running, completed, failed]
          example: "pending"
        createdAt:
          type: string
          format: date-time
          example: "2025-07-01T12:00:00Z"
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
              example: "/learning/experiments/123e4567-e89b-12d3-a456-426614174000"
            results:
              type: string
              format: uri
              example: "/learning/experiments/123e4567-e89b-12d3-a456-426614174000/results"

    LearningExperimentSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    LearningExperimentDetails:
      allOf:
        - $ref: '#/components/schemas/LearningExperimentSummary'
        - type: object
          properties:
            description:
              type: string
            parameters:
              type: object
              additionalProperties: true
            resources:
              type: array
              items:
                $ref: '#/components/schemas/LearningResource'
            metrics:
              type: object
              additionalProperties: true
            createdBy:
              type: string
            updatedBy:
              type: string

    LearningExperimentUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        parameters:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string

    LearningResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [article, video, course, dataset, model, other]
        title:
          type: string
        description:
          type: string
        uri:
          type: string
          format: uri
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
